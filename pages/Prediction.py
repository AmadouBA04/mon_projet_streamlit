import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.preprocessing import OneHotEncoder
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier

# Configuration de la page
st.set_page_config(page_title="Pr√©diction", page_icon="üîÆ", layout="wide")

@st.cache_data
def load_data():
    """Charge les donn√©es depuis un fichier Excel sans modifier le temps de suivi."""
    file_path = "Donnn√©es_Projet_M2SID2023_2024_pr√©par√©es.xlsx"
    df = pd.read_excel(file_path, engine="openpyxl")
    return df

# Charger les donn√©es
df = load_data()

st.title("üîÆ Pr√©diction")

# V√©rifier si la colonne Evolution existe et la convertir
if "Evolution" in df.columns:
    if df["Evolution"].dtype == "object":
        df["Evolution"] = df["Evolution"].map({"Vivant": 1, "Deces": 0})
else:
    df["Evolution"] = pd.Series(dtype="float64")

# S√©parer les features et la cible
X = df.drop(columns=["Evolution"], errors="ignore")
y = df["Evolution"]

# S√©lectionner uniquement les colonnes cat√©goriques
categorical_cols = X.select_dtypes(include=["object"]).columns
X[categorical_cols] = X[categorical_cols].astype(str)

# Encodage des variables cat√©goriques
encoder = OneHotEncoder(drop="first", sparse_output=False, handle_unknown="ignore")
X_encoded = pd.DataFrame(encoder.fit_transform(X[categorical_cols]), 
                         columns=encoder.get_feature_names_out(), 
                         index=X.index)

# Fusionner avec les autres colonnes num√©riques
X_final = pd.concat([X_encoded, X.select_dtypes(exclude=["object"])], axis=1)

# Reconstruire les mod√®les avec de nouveaux noms
logistic_model_pred = LogisticRegression()
svm_model_pred = SVC()
rf_model_pred = RandomForestClassifier()

# Entra√Æner les nouveaux mod√®les
logistic_model_pred.fit(X_final, y)
svm_model_pred.fit(X_final, y)
rf_model_pred.fit(X_final, y)

# Sauvegarder les mod√®les pour une utilisation ult√©rieure
joblib.dump(logistic_model_pred, "logistic_model_pred.pkl")
joblib.dump(svm_model_pred, "svm_model_pred.pkl")
joblib.dump(rf_model_pred, "rf_model_pred.pkl")

# S√©lection du mod√®le pour la pr√©diction
st.sidebar.header("Choix du mod√®le")
model_choice = st.sidebar.selectbox("S√©lectionner un mod√®le", 
                                    ["R√©gression Logistique", "SVM", "For√™t Al√©atoire"])

# Saisie utilisateur pour les nouvelles pr√©dictions
st.write("### Entrez les caract√©ristiques du patient pour la pr√©diction")
user_input = {}

for col in X.columns:
    if col in categorical_cols:
        user_input[col] = st.selectbox(f"{col}", df[col].unique())
    else:
        user_input[col] = st.number_input(f"{col}", float(df[col].min()), float(df[col].max()))

# Transformer l'entr√©e utilisateur
user_df = pd.DataFrame([user_input])
user_df[categorical_cols] = user_df[categorical_cols].astype(str)
user_encoded = pd.DataFrame(encoder.transform(user_df[categorical_cols]), 
                            columns=encoder.get_feature_names_out())
user_final = pd.concat([user_encoded, user_df.select_dtypes(exclude=["object"])], axis=1)

# Charger le bon mod√®le et faire la pr√©diction
if st.sidebar.button("Pr√©dire"):
    if model_choice == "R√©gression Logistique":
        model = joblib.load("logistic_model_pred.pkl")
    elif model_choice == "SVM":
        model = joblib.load("svm_model_pred.pkl")
    else:
        model = joblib.load("rf_model_pred.pkl")
    
    prediction = model.predict(user_final)
    resultat = "Vivant" if prediction[0] == 1 else "D√©c√®s"
    st.write(f"### R√©sultat de la pr√©diction : {resultat}")
