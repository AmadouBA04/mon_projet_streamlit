import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import base64

# Fonction pour d√©finir l'image d'arri√®re-plan
def set_background(image_file):
    with open(image_file, "rb") as file:
        encoded_string = base64.b64encode(file.read()).decode()
    
    css_code = f"""
    <style>
    .stApp {{
        background-image: url("data:image/png;base64,{encoded_string}");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
    }}
    </style>
    """
    st.markdown(css_code, unsafe_allow_html=True)

# D√©finir l'image d'arri√®re-plan
set_background("AC.jpeg")  # Assurez-vous que l'image est dans le bon dossier


# Charger les donn√©es
df = pd.read_excel("Donnn√©es_Projet_M2SID2023_2024_pr√©par√©es.xlsx")

st.title("üìä Donn√©es et Statistiques")
st.write("Il s‚Äôagit de donn√©es de patients atteints d‚Äôaccident c√©r√©bral vasculaire (AVC), trait√©s et suivis.")
st.write("NB : Ces donn√©es ont √©t√© produites juste pour cette exp√©rience, aucune r√©utilisation ne sera reconnue !")

# üìå D√©finition des variables num√©riques et cat√©gorielles d√®s le d√©but
numeric_columns = df.select_dtypes(include=['number']).columns.tolist()
categorical_columns = df.select_dtypes(include=['object']).columns.tolist()

# üìå Barre lat√©rale : Options d'affichage
st.sidebar.subheader("AFFICHAGE")
show_data = st.sidebar.checkbox("DONN√âES")
show_stats = st.sidebar.checkbox("STATISTIQUES ET ANALYSES")

if show_data:
    st.write("### Aper√ßu des donn√©es :")
    st.write(df.head())
    st.write("#### Liste des variables :", df.columns.tolist())

if show_stats:
    analysis_type = st.sidebar.radio("Choisissez le type d'analyse :", ["Analyse univari√©e", "Analyse bivari√©e"])

    # üîπ ANALYSE UNIVARI√âE
    if analysis_type == "Analyse univari√©e":
        st.write("## Analyse univari√©e")

        # üìå Statistiques pour les variables num√©riques
        # üìå Statistiques descriptives de AGE
        if "AGE" in df.columns:
            st.write("### Statistiques descriptives de AGE")
            st.write(df["AGE"].describe())
        else:
            st.write("La variable 'AGE' n'est pas pr√©sente dans les donn√©es.")

        # Histogramme
        # üìå V√©rifier si 'AGE' est bien dans les colonnes
        if "AGE" in df.columns:
            st.write("### Histogramme de l'√¢ge")
            fig, ax = plt.subplots(figsize=(8, 4))
            sns.histplot(df["AGE"].dropna(), bins=20, kde=True, color="skyblue", edgecolor="black", ax=ax)
            st.pyplot(fig)
        else:
            st.write("‚ö†Ô∏è La variable 'AGE' n'est pas pr√©sente dans les donn√©es.")

        # üìå Statistiques pour les variables cat√©gorielles
        for col in categorical_columns:
            st.write(f"### R√©partition de {col}")
            fig, ax = plt.subplots(figsize=(5, 5))
            df[col].value_counts().plot.pie(autopct="%1.1f%%", startangle=90, ax=ax, cmap="coolwarm")
            ax.set_ylabel("")
            st.pyplot(fig)

    # üîπ ANALYSE BIVARI√âE
    elif analysis_type == "Analyse bivari√©e":
        st.write("## Analyse bivari√©e")

        # üìå Relations entre variables num√©riques et Evolution
        st.write("### Relation entre variables num√©riques et Evolution")
        for col in numeric_columns:
            if col != "AGE":  # AGE est trait√© s√©par√©ment
                fig, ax = plt.subplots(figsize=(8, 5))
                sns.boxplot(x="Evolution", y=col, data=df, ax=ax)
                st.pyplot(fig)

        # üìå Relation AGE et Evolution
        st.write("### Relation entre AGE et Evolution")
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.boxplot(x="Evolution", y="AGE", data=df, ax=ax)
        st.pyplot(fig)

        # üìå Relations entre variables cat√©gorielles et Evolution
        st.write("### Relations entre variables cat√©gorielles et Evolution")
        for col in categorical_columns:
            cross_tab = pd.crosstab(df[col], df["Evolution"])
            st.write(f"#### {col} vs Evolution")
            st.write(cross_tab)
            fig, ax = plt.subplots(figsize=(5, 5))
            cross_tab.plot(kind="bar", stacked=True, colormap="coolwarm", ax=ax)
            st.pyplot(fig)

        # üîπ Matrice de corr√©lation finale avec variables sp√©cifiques
        st.write("## Matrice de corr√©lation entre variables cl√©s")
        selected_columns = ["AGE", "Evolution", "Nbj_Premiers_Signe_Adm_Hop", 
                            "Nbj_Adm_Hop_Prise_Charge", "Diabete", "SEXE"]
        
        # V√©rifier si toutes les colonnes s√©lectionn√©es existent
        selected_columns = ["AGE", "Evolution", "Nbj_Premiers_Signe_Adm_Hop", "Diabete", "SEXE"]

        # Conversion des variables cat√©gorielles en num√©riques
        df_encoded = pd.get_dummies(df[selected_columns], drop_first=True)

        corr_matrix = df_encoded.corr()
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.heatmap(corr_matrix, annot=True, fmt=".2f", cmap="coolwarm", linewidths=0.5, ax=ax)
        st.pyplot(fig)
